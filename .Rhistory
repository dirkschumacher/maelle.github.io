y = 0, yend = n)) +
ylab("Number of reported deaths") +
xlab("Time (months)") +
geom_line(aes(x = month, y = pred), col = "blue") +
geom_ribbon(aes(x = month, ymin = lower, ymax = upper),
alpha = 0.5)
summary(fit_nb)
time <- log(1:nrow(monthly_deaths))
fit_pois <- tsglm(ts_deaths[1:144], model = list(past_obs = 1), distr = "poisson")
fit_nb <- tsglm(ts_deaths[1:144], model = list(past_obs = 1), distr = "nbinom")
summary(fit_nb)
summary(fit_pois)
time <- log(1:nrow(monthly_deaths))
fit_pois <- tsglm(ts_deaths[1:144], model = list(past_obs = 12), distr = "poisson")
fit_nb <- tsglm(ts_deaths[1:144], model = list(past_obs = 12), distr = "nbinom")
summary(fit_pois)
acf(residuals(fit_pois))
time <- log(1:nrow(monthly_deaths))
fit_pois <- tsglm(ts_deaths[1:144], model = list(past_obs = c(1,2)), distr = "poisson")
fit_nb <- tsglm(ts_deaths[1:144], model = list(past_obs = 12), distr = "nbinom")
summary(fit_pois)
acf(residuals(fit_pois))
time <- log(1:nrow(monthly_deaths))
fit_pois <- tsglm(ts_deaths[1:144], model = list(past_obs = c(1,2)), distr = "poisson")
fit_nb <- tsglm(ts_deaths[1:144], model = list(past_obs = c(1,2)), distr = "nbinom")
set.seed(2)
pred2016 <- predict(fit_nb, n.ahead = 12, level = 0.9, global = TRUE, B = 3000)
monthly_deaths <- mutate(monthly_deaths, lower = NA,
upper = NA, pred = NA)
monthly_deaths$lower[145:156] <- pred2016$interval[,1]
monthly_deaths$upper[145:156] <- pred2016$interval[,2]
monthly_deaths$pred[145:156] <- pred2016$pred
ggplot(monthly_deaths) +
geom_segment(aes(x = month, xend = month,
y = 0, yend = n)) +
ylab("Number of reported deaths") +
xlab("Time (months)") +
geom_line(aes(x = month, y = pred), col = "blue") +
geom_ribbon(aes(x = month, ymin = lower, ymax = upper),
alpha = 0.5)
summary(fit_nb)
summary(fit_pois)
set.seed(2)
pred2016 <- predict(fit_pois, n.ahead = 12, level = 0.9, global = TRUE, B = 3000)
monthly_deaths <- mutate(monthly_deaths, lower = NA,
upper = NA, pred = NA)
monthly_deaths$lower[145:156] <- pred2016$interval[,1]
monthly_deaths$upper[145:156] <- pred2016$interval[,2]
monthly_deaths$pred[145:156] <- pred2016$pred
ggplot(monthly_deaths) +
geom_segment(aes(x = month, xend = month,
y = 0, yend = n)) +
ylab("Number of reported deaths") +
xlab("Time (months)") +
geom_line(aes(x = month, y = pred), col = "blue") +
geom_ribbon(aes(x = month, ymin = lower, ymax = upper),
alpha = 0.5)
summary(fit_pois)
set.seed(2)
pred2016 <- predict(fit_pois, n.ahead = 12, level = 0.9, global = TRUE, B = 3000)
monthly_deaths <- mutate(monthly_deaths, lower = NA,
upper = NA, pred = NA)
monthly_deaths$lower[145:156] <- pred2016$interval[,1]
monthly_deaths$upper[145:156] <- pred2016$interval[,2]
monthly_deaths$pred[145:156] <- pred2016$pred
ggplot(monthly_deaths) +
geom_segment(aes(x = month, xend = month,
y = 0, yend = n)) +
ylab("Number of reported deaths") +
xlab("Time (months)") +
geom_line(aes(x = month, y = pred), col = "blue") +
geom_ribbon(aes(x = month, ymin = lower, ymax = upper),
alpha = 0.5)
time <- log(1:nrow(monthly_deaths))
fit_pois <- tsglm(ts_deaths[1:144], model = list(past_obs = c(1,12)), distr = "poisson")
fit_nb <- tsglm(ts_deaths[1:144], model = list(past_obs = c(1,12)), distr = "nbinom")
acf(residuals(fit_nb))
time <- log(1:nrow(monthly_deaths))
fit_pois <- tsglm(ts_deaths[1:144], model = list(past_obs = c(1, 2,12)), distr = "poisson")
fit_nb <- tsglm(ts_deaths[1:144], model = list(past_obs = c(1, 2,12)), distr = "nbinom")
acf(residuals(fit_nb))
install.packages("glarma")
library("rvest")
wikisize <- html("https://en.wikipedia.org/wiki/Wikipedia:Size_of_Wikipedia#The_data_set")
wikisize %>%
html_nodes("table")
wikisize %>%
html_nodes("table") %>%
.[[2]] %>%
html_table()
wikisize %>%
html_nodes("table") %>%
.[[3]] %>%
html_table()
i=4
names(wikisize %>%
html_nodes("table") %>%
.[[i]] %>%
html_table())
View(wikisize %>%
html_nodes("table") %>%
.[[i]] %>%
html_table())
i=5
names(wikisize %>%
html_nodes("table") %>%
.[[i]] %>%
html_table())
i=6
names(wikisize %>%
html_nodes("table") %>%
.[[i]] %>%
html_table())
View(wikisize %>%
html_nodes("table") %>%
.[[i]] %>%
html_table())
i
i=7
names(wikisize %>%
html_nodes("table") %>%
.[[i]] %>%
html_table())
i=8
names(wikisize %>%
html_nodes("table") %>%
.[[i]] %>%
html_table())
i=9
names(wikisize %>%
html_nodes("table") %>%
.[[i]] %>%
html_table())
wikisize %>%
html_nodes("table")
i=19
names(5327098)
names(wikisize %>%
html_nodes("table") %>%
.[[i]] %>%
html_table())
View(wikisize %>%
html_nodes("table") %>%
.[[i]] %>%
html_table())
wikisize %>%
html_nodes("table") %>%
.[[i]] %>%
html_table()
nrow(wikisize %>%
html_nodes("table") %>%
.[[i]] %>%
html_table())
wikisize <- readr::read_csv("data/2017-02-14_wikisize.csv")
wikisize <- readr::read_csv("_source/data/2017-02-14_wikisize.csv")
View(wikisize)
wikisize <- readr::read_csv("_source/data/2017-02-14_wikisize.csv",
col_names = c("date", "articles_count", "comment"))
View(wikisize)
class(wikisize$date)
unique(wikisize$comment)
library("ggplot2")
ggplot(wikisize) +
geom_point(aes(date, articles_count))
filter(wikisize, day(date) == 1)
filter(wikisize, lubridate::day(date) == 1)
library("dplyr")
filter(wikisize, lubridate::day(date) == 1)
filter(wikisize, lubridate::day(date) == 1) %>% View()
filter(wikisize, lubridate::day(date) == 1) %>% nrow()
filter(wikisize, lubridate::day(date) == 2) %>% nrow()
filter(wikisize, lubridate::day(date) == 3) %>% nrow()
filter(wikisize, lubridate::day(date) == 20) %>% nrow()
library("lubridate")
group_by(wikisize, month(date), year(date)) %>%
summarize(earliestday = min(day(date))) %>%
View()
View(
group_by(wikisize, month(date), year(date)) %>%
summarize(earliestday = min(day(date)),
count = count[min(day(date)) == earliestday]))
View(group_by(wikisize, month(date), year(date)) %>%
summarize(earliestday = min(day(date)),
count = articles_count[min(day(date)) == earliestday])
)
group_by(wikisize, month(date), year(date)) %>%
summarize(earliestday = min(day(date)),
count = articles_count[min(day(date)) == earliestday][1])
View(
group_by(wikisize, month(date), year(date)) %>%
summarize(earliestday = min(day(date)),
count = articles_count[min(day(date)) == earliestday][1]))
wikisize <- group_by(wikisize, month(date), year(date)) %>%
summarize(earliestday = min(day(date)),
count = articles_count[min(day(date)) == earliestday][1])
source('~/masalmon.github.io/_source/get_wikipedia_size.R')
wikisize %>% group_by(year) %>% summarize(n = n())
library("purrr")
years <- 2004:2016
month <- 1:12
allmonths <- map2(years, month, bind_cols) %>% bind_rows()
source('~/masalmon.github.io/_source/get_wikipedia_size.R')
source('~/masalmon.github.io/_source/get_wikipedia_size.R')
View(deaths)
View(wikisize)
deaths$articles_count[1] <- 188538
deaths <- mutate(deaths,
articles_count = zoo::na.locf(articles_count))
View(deaths)
ggplot(deaths) +
geom_point(aes(date, n_deaths/articles_count))
monthly_deaths <- deaths  %>%
group_by(date) %>%
mutate(month = update(date, day = 1)) %>%
ungroup() %>%
group_by(month) %>%
summarize(n = n(),
articles = mean(articles))
monthly_deaths <- deaths  %>%
group_by(date) %>%
mutate(month = update(date, day = 1)) %>%
ungroup() %>%
group_by(month) %>%
summarize(n = sum(n_deaths),
articles = mean(articles_count))
ggplot(monthly_deaths) +
geom_point(aes(date, n/articles))
ggplot(monthly_deaths) +
geom_point(aes(month, n/articles))
monthly_deaths <- filter(monthly_deaths,
year(month) > 2008)
ggplot(monthly_deaths) +
geom_point(aes(month, n/articles))
?glarma
library("glarma")
?glarma
?DriverDeaths
nrow(monthly_deaths)
nrow(monthly_deaths)-12
85:96
length(85:96)
ts_deaths <- xts::xts(monthly_deaths$n[1:84],
monthly_deaths$month[1:84])
plot(ts_deaths)
min(monthly_deaths$month[1:84])
ts_deaths = ts(ts_deaths, freq=12, start=c(2009, 1))
plot(ts_deaths)
log(monthly_deaths$articles[1:84]/100000)
glarmamodOffset <- glarma(ts_deaths,
offset = log(monthly_deaths$articles[1:84]/100000),
phiLags = c(12),
type = "Poi", method = "FS",
residuals = "Pearson", maxit = 100, grad = 1e-6)
print(summary(glarmamodOffset))
par(mfrow =c(3,2))
plot(glarmamodOffset)
?glarma
glarmamodOffset <- glarma(ts_deaths,
X = rep(1, 84),
offset = log(monthly_deaths$articles[1:84]/100000),
phiLags = c(12),
type = "Poi", method = "FS",
residuals = "Pearson", maxit = 100, grad = 1e-6)
glarmamodOffset <- glarma(ts_deaths,
X = as.matrix(rep(1, 84)),
offset = log(monthly_deaths$articles[1:84]/100000),
phiLags = c(12),
type = "Poi", method = "FS",
residuals = "Pearson", maxit = 100, grad = 1e-6)
print(summary(glarmamodOffset))
glarmamodOffset
plot(glarmamodOffset)
par(mfrow =c(3,2))
plot(glarmamodOffset)
par(mfrow =c(3,2))
plot(glarmamodOffset)
class(predict(glarmamodOffset))
pred <- "forecast"(glarmamodOffset, n.ahead = 12,
newdata = as.matrix(rep(1, 12)),
newoffset = monthly_deaths$articles[85:96])
warnings()
class(preds)
class(pred)
pred
pred <- forecast(glarmamodOffset, n.ahead = 12,
newdata = as.matrix(rep(1, 12)),
newoffset = log(monthly_deaths$articles[85:96]/100000))
pred$Y
monthly_deaths$pred <- NA
monthly_deaths$pred[85:96] <- pred$Y
ggplot(monthly_deaths) +
geom_segment(aes(x = month, xend = month,
y = 0, yend = n)) +
ylab("Number of reported deaths") +
xlab("Time (months)") +
geom_line(aes(x = month, y = pred), col = "blue")
names(monthly_deaths)
ggplot(monthly_deaths) +
geom_segment(aes(x = month, xend = month,
y = 0, yend = n)) +
ylab("Number of reported deaths")
ggplot(monthly_deaths) +
geom_segment(aes(x = month, xend = month,
y = 0, yend = n)) +
ylab("Number of reported deaths") +
xlab("Time (months)") +
geom_line(aes(x = month, y = pred), col = "blue") +
geom_ribbon(aes(x = month, ymin = lower, ymax = upper),
alpha = 0.5)
ggplot(monthly_deaths) +
geom_segment(aes(x = month, xend = month,
y = 0, yend = n)) +
ylab("Number of reported deaths") +
xlab("Time (months)") +
geom_line(aes(x = month, y = pred), col = "blue")
?glarma
glarmamodOffset <- glarma(ts_deaths,
X = as.matrix(rep(1, 84)),
offset = log(monthly_deaths$articles[1:84]/100000),
phiLags = c(1),
type = "NegBin", method = "FS",
residuals = "Pearson", maxit = 100, grad = 1e-6)
acf(residuals(glarmamodOffset))
glarmamodOffset <- glarma(ts_deaths,
X = as.matrix(rep(1, 84)),
offset = log(monthly_deaths$articles[1:84]/100000),
phiLags = c(1, 12),
type = "NegBin", method = "FS",
residuals = "Pearson", maxit = 100, grad = 1e-6)
acf(residuals(glarmamodOffset))
pred <- forecast(glarmamodOffset, n.ahead = 12,
newdata = as.matrix(rep(1, 12)),
newoffset = log(monthly_deaths$articles[85:96]/100000))
summary(model)
glarmamodOffset
servr::jekyll()
servr::jekyll()
?qnbinom
glarmamodOffset
names(glarmamodOffset)
glarmamodOffset
glarmamodOffset$delta
upper <- qnbinom(0.975,pred$delta[4]/(pred$delta[4]-1),1/pred$delta[4]))
upper <- qnbinom(0.975,pred$delta[4]/(pred$delta[4]-1),1/pred$delta[4])
upper
upper <- qnbinom(0.975,pred$Y/(pred$delta[4]-1),1/pred$delta[4])
upper
pred$Y/(pred$delta[4]-1)
pred$Y
pred$delta[4]
pred$delta[1,4]
pred$delta
upper <- qnbinom(0.975,pred$Y/(glarmamodOffset$delta[4]-1),1/glarmamodOffset$delta[4])
upper
qnbinom(0.975,pred$Y/(10-1),1/10)
?qnbinom
upper <- qnbinom(0.975, mu = pred$Y, size = glarmamodOffset$delta[4])
upper
qnbinom(0.975, mu = pred$Y, size = 10)
glarmamodOffset <- glarma(ts_deaths,
X = as.matrix(rep(1, 84)),
offset = log(monthly_deaths$articles[1:84]/100000),
phiLags = c(1, 12),
type = "NegBin", method = "FS",
residuals = "Pearson", maxit = 100, grad = 1e-6)
pred <- forecast(glarmamodOffset, n.ahead = 12,
newdata = as.matrix(rep(1, 12)),
newoffset = log(monthly_deaths$articles[85:96]/100000))
monthly_deaths <- mutate(monthly_deaths,
pred = NA, lower = NA, upper = NA)
monthly_deaths$pred[85:96] <- pred$Y
monthly_deaths$upper[85:96] <- qnbinom(0.975, mu = pred$Y, size = glarmamodOffset$delta[4])
monthly_deaths$lower[85:96] <- qnbinom(0.125, mu = pred$Y, size = glarmamodOffset$delta[4])
ggplot(monthly_deaths) +
geom_segment(aes(x = month, xend = month,
y = 0, yend = n)) +
ylab("Number of reported deaths") +
xlab("Time (months)") +
geom_line(aes(x = month, y = pred), col = "blue")+
geom_ribbon(aes(x = month, ymin = lower, ymax = upper),
alpha = 0.5)
servr::jekyll()
servr::jekyll()
p <- ggplot(now_data)
p <- geom_col(aes(x = animal,
y = gestation,
fill = color))
grepl("c[au]t[e]?ness", "catness")
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll
servr::jekyll()
servr::jekyll()
library("gh")
library("dplyr")
library("purrr")
get_repos <- function(org){
ropensci_repos_names <- NULL
page <- 1
geht <- TRUE
while(geht){
print(page)
ropensci_repos <- try(gh("/orgs/:org/repos",
org = org,
page = page))
geht <- ropensci_repos != ""
if(geht){
ropensci_repos_names <- c(ropensci_repos_names,
vapply(ropensci_repos, "[[", "", "name"))
page <- page + 1
}
}
}
get_repos("ropenscilabs")
library("gh")
library("dplyr")
library("purrr")
get_repos <- function(org){
ropensci_repos_names <- NULL
page <- 1
geht <- TRUE
while(geht){
print(page)
ropensci_repos <- try(gh("/orgs/:org/repos",
org = org,
page = page))
geht <- ropensci_repos != ""
if(geht){
ropensci_repos_names <- c(ropensci_repos_names,
vapply(ropensci_repos, "[[", "", "name"))
page <- page + 1
}
}
return(ropensci_repos_names)
}
library("gh")
library("dplyr")
library("purrr")
get_repos <- function(org){
ropensci_repos_names <- NULL
page <- 1
geht <- TRUE
while(geht){
ropensci_repos <- try(gh("/orgs/:org/repos",
org = org,
page = page))
geht <- ropensci_repos != ""
if(geht){
ropensci_repos_names <- c(ropensci_repos_names,
vapply(ropensci_repos, "[[", "", "name"))
page <- page + 1
}
}
return(ropensci_repos_names)
}
get_repos("ropenscilabs")
library("gh")
library("dplyr")
library("purrr")
get_repos <- function(org){
ropensci_repos_names <- NULL
page <- 1
geht <- TRUE
while(geht){
ropensci_repos <- try(gh("/orgs/:org/repos",
org = org,
page = page))
geht <- ropensci_repos != ""
if(geht){
ropensci_repos_names <- c(ropensci_repos_names,
vapply(ropensci_repos, "[[", "", "name"))
page <- page + 1
}
}
return(ropensci_repos_names)
}
head(get_repos(org = org))
first_commit <- function(repo, org){
print(repo)
messages <- NULL
page <- 1
geht <- TRUE
while(geht){
commits <- try(gh("/repos/:owner/:repo/commits",
owner = org,
repo = repo,
page = page))
if(class(commits)[1] != "try-error"){
geht <- commits != ""
}else{
geht <- FALSE
}
if(geht){
now <- lapply(commits, "[[", "commit")
now <- lapply(now, "[[", "message")
messages <- c(messages, unlist(now))
page <- page + 1
}
}
messages[length(messages)]
}
first_commit("ropenaq", "ropensci")
ropenscilabs_first_commits <- get_repos("ropenscilabs")[1:2] %>%
map(first_commit, org = "ropenscilabs")
ropenscilabs_first_commits
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
servr::jekyll()
